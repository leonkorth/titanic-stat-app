library(grid)
library(vcd)
assocstats(ausschlag)
library(DescTools)
Phi(ausschlag)
ContCoef(ausschlag)
CramerV(ausschlag)
daten2 <- matrix(c(298, 0, 0, 128), nrow=2, byrow=T,
dimnames=list(c("mit Creme","ohne Creme"),
c("besser","schlechter")))
kable(daten2)
library(knitr)
daten2 <- matrix(c(298, 0, 0, 128), nrow=2, byrow=T,
dimnames=list(c("mit Creme","ohne Creme"),
c("besser","schlechter")))
kable(daten2)
library(grid)
library(vcd)
assocstats(daten2)
library(DescTools)
Phi(daten2)
ContCoef(daten2)
CramerV(daten2)
knitr::opts_chunk$set(echo = TRUE)
ggplot(mietspiegel, aes(y=mietspiegel$nm, x=mietspiegel$wfl)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("Wohnfläche") +
ylab("Nettomiete")
mietspiegel <- read.table("miete03.asc", header=TRUE)
mietspiegel
ggplot(mietspiegel, aes(y=mietspiegel$nm, x=mietspiegel$wfl)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("Wohnfläche") +
ylab("Nettomiete")
output:
html_document: default
html_notebook: default
pdf_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Aufgabenblatt 9
## Statistik fÃ¼r Wirtschaftsinformatiker, Ãbung, HTW Berlin
### Michael Heimann, Shirin Riazy
Stand: `r format(Sys.Date(), format='%d.%m.%Y')`
## Wiederholung
* Was ist Korrelation?
-> Korrelation beschreibt den Zusammenhang von Variablen in zwei Dimensionen <Richtung> und <Stärke>.
* Was ist lineare Regression?
-> Mit linearer Regression lassen sich die Werte einer Variablen vorhersagen.
* Was ist die Gleichung fÃ¼r eine Gerade?
-> y = m*x + c
-> yk = bxk + a
-> yk = Kriteriumswert
-> xk = Prädikatorenwert
->  a = Schnittpunkt mit y-Achse
* Welche ist die unabhÃ¤ngige und welche ist die abhÃ¤ngige Variable in der Gleichung?
-> das Prädikat bzw. die Prädikatoren sind die unabhängigen Variablen, die das Kriterium, die abhängige Variable, vorhersagen können.
## Aufgabe 9.1 (Regressionsrechnung)
Laden Sie den Datensatz `Readiq` aus dem R-Paket `BSDA`.
```{r, message=FALSE}
library(lattice)
library(BSDA)
data(Readiq)
```
a) Machen Sie sich mit dem Datensatz vertraut. Was sind die beiden Merkmale in dem Datensatz?
b) Fertigen Sie ein Streudiagramm (Scatterplot) an.
c) Bestimmem Sie den Korrelationskoeffizienten nach Pearson fÃ¼r die beiden Merkmale. Liegt keine, eine schwache, eine mittlere oder eine starke positive bzw. negative Korrelation zwischen beiden Merkmalen vor? Was bedeutet dies?
d) Bestimmen Sie die Geradengleichung der linearen Regression mit `Readiq$reading` als unabhÃ¤ngige und `Readiq$iq` als abhÃ¤ngige Variable. Berechnen Sie dazu die Werte von $a$ und $b$ in R mit den Formeln aus der Vorlesung. Hinweis: Obwohl `sd()` in R die Stichprobenvarianz und nicht die empirische Varianz aus den Formeln ist, kann `sd()` benutzt werden, da sich die Faktoren ($1/n$ bzw. $1/(n+1)$) in der Formel herauskÃ¼rzen.
e) FÃ¼gen Sie dem Streuungsdiagramm von `Readiq$reading` und `Readiq$iq` die Regressionsgerade zu. Hinweis: Benutze `abline()`.
## Aufgabe 9.2 (Regressionsrechnung)
Ãber die EinfÃ¼hrung des Mindestlohns wurde lange diskutiert. Ende 2007 verÃ¶ffentlichte die *Wirtschaftswoche* folgende Daten zu Mindestlohn (in Euro) und
Arbeitslosenquote (in Prozent):
```{r}
library(knitr)
mindestlohn_tabelle <- data.frame(row.names = c("Irland", "Frankreich", "GroÃbritannien",
"Belgien", "Niederlande", "USA", "Spanien"),
Mindestlohn = c(8.65, 4.44, 8.2, 8.08, 8.08, 4.3, 3.42),
Arbeitslosenquote = c(4.4, 9.0, 5.5, 8.2, 5.5, 4.6, 8.5))
kable(mindestlohn_tabelle)
```
ggplot(mietspiegel, aes(y=mietspiegel$nm, x=mietspiegel$wfl)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("Wohnfläche") +
ylab("Nettomiete")
mietspiegel <- read.table("miete03.asc", header=TRUE)
mietspiegel
mietspiegel <- read.table("miete03.asc", header=TRUE)
mietspiegel
ggplot(mietspiegel, aes(y=mietspiegel$nm, x=mietspiegel$wfl)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("Wohnfläche") +
ylab("Nettomiete")
library(ggplot2)
mietspiegel <- read.table("miete03.asc", header=TRUE)
mietspiegel
ggplot(mietspiegel, aes(y=mietspiegel$nm, x=mietspiegel$wfl)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("Wohnfläche") +
ylab("Nettomiete")
ggplot(mietspiegel, aes(y=mietspiegel$nm, x=mietspiegel$wfl)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("Wohnfläche") +
ylab("Nettomiete")
mietspiegel_regression <- lm(mietspiegel$nm ~ mietspiegel$wfl, data = mietspiegel)
summary(mietspiegel_regression)
lm(nm ~ wfl + wohnbest, data = mietspiegel)
regression <- lm(nm ~ wfl + wohnbest, data = mietspiegel)
summary(regression)
regression <- lm(nm ~ wfl + wohnbest, data = mietspiegel)
summary(regression)
regression2 <- lm(nm ~wfl + wohnbest + ww0 + kueche, data = mietspiegel)
summary(regression2)
x <- runif(100, 0, 100)
e <- runif(100, 0, 50)
y <- x^2 + x * e
knitr::opts_chunk$set(echo = TRUE)
x <- runif(100, 0, 100)
e <- runif(100, 0, 50)
y <- x^2 + x * e
lm(y ~ poly(x,2))
x <- runif(100, 0, 100)
e <- runif(100, 0, 50)
y <- x^2 + x * e
regression9.5 <- lm(y ~ poly(x,2))
summary(regression9.5)
y1 <- x + e
y2 <- y1^4
y3 <- (x - 50)^2 + 30 * e
data1 <- data.frame(x=x, y=y1)
data2 <- data.frame(x=x, y=y2)
data3 <- data.frame(x=x, y=y3)
library(plotly)
y1 <- x + e
y2 <- y1^4
y3 <- (x - 50)^2 + 30 * e
data1 <- data.frame(x=x, y=y1)
data2 <- data.frame(x=x, y=y2)
data3 <- data.frame(x=x, y=y3)
install.packages('plotly')
library(plotly)
y1 <- x + e
y2 <- y1^4
y3 <- (x - 50)^2 + 30 * e
data1 <- data.frame(x=x, y=y1)
data2 <- data.frame(x=x, y=y2)
data3 <- data.frame(x=x, y=y3)
library(plotly)
y1 <- x + e
y2 <- y1^4
y3 <- (x - 50)^2 + 30 * e
data1 <- data.frame(x=x, y=y1)
data2 <- data.frame(x=x, y=y2)
data3 <- data.frame(x=x, y=y3)
library(plotly)
cp1 <- round(cor(x, y1, method = "pearson"), 3)
cs1 <- round(cor(x, y1, method = "spearman"), 3)
ck1 <- round(cor(x, y1, method = "kendall"), 3)
plot_ly(x=x, y=y1, type = "scatter") %>%
add_lines(y = ~fitted(lm(y1 ~ x)), showlegend = FALSE) %>%
layout(title = paste("Korrelationen: r =", cp1, ", rho =", cs1, ", tau =", ck1))
x <- runif(100, 0, 100)
e <- runif(100, 0, 50)
y <- x^2 + x * e
y1 <- x + e
y2 <- y1^4
y3 <- (x - 50)^2 + 30 * e
data1 <- data.frame(x=x, y=y1)
data2 <- data.frame(x=x, y=y2)
data3 <- data.frame(x=x, y=y3)
library(plotly)
cp1 <- round(cor(x, y1, method = "pearson"), 3)
cs1 <- round(cor(x, y1, method = "spearman"), 3)
ck1 <- round(cor(x, y1, method = "kendall"), 3)
plot_ly(x=x, y=y1, type = "scatter") %>%
add_lines(y = ~fitted(lm(y1 ~ x)), showlegend = FALSE) %>%
layout(title = paste("Korrelationen: r =", cp1, ", rho =", cs1, ", tau =", ck1))
cp2 <- round(cor(x, y2, method = "pearson"), 3)
cs2 <- round(cor(x, y2, method = "spearman"), 3)
ck2 <- round(cor(x, y2, method = "kendall"), 3)
plot_ly(x=x, y=y2, type = "scatter") %>%
add_lines(y = ~fitted(lm(y2 ~ x)), showlegend = FALSE) %>%
layout(title = paste("Korrelationen: r =", cp2, ", rho =", cs2, ", tau =", ck2))
x <- runif(100, 0, 100)
e <- runif(100, 0, 50)
y <- x^2 + x * e
y1 <- x + e
y2 <- y1^4
y3 <- (x - 50)^2 + 30 * e
data1 <- data.frame(x=x, y=y1)
data2 <- data.frame(x=x, y=y2)
data3 <- data.frame(x=x, y=y3)
library(plotly)
cp1 <- round(cor(x, y1, method = "pearson"), 3)
cs1 <- round(cor(x, y1, method = "spearman"), 3)
ck1 <- round(cor(x, y1, method = "kendall"), 3)
plot_ly(x=x, y=y1, type = "scatter") %>%
add_lines(y = ~fitted(lm(y1 ~ x)), showlegend = FALSE) %>%
layout(title = paste("Korrelationen: r =", cp1, ", rho =", cs1, ", tau =", ck1))
cp2 <- round(cor(x, y2, method = "pearson"), 3)
cs2 <- round(cor(x, y2, method = "spearman"), 3)
ck2 <- round(cor(x, y2, method = "kendall"), 3)
plot_ly(x=x, y=y2, type = "scatter") %>%
add_lines(y = ~fitted(lm(y2 ~ x)), showlegend = FALSE) %>%
layout(title = paste("Korrelationen: r =", cp2, ", rho =", cs2, ", tau =", ck2))
cp3 <- round(cor(x, y3, method = "pearson"), 3)
cs3 <- round(cor(x, y3, method = "spearman"), 3)
ck3 <- round(cor(x, y3, method = "kendall"), 3)
plot_ly(x=x, y=y3, type = "scatter") %>%
add_lines(y = ~fitted(lm(y3 ~ x)), showlegend = FALSE) %>%
layout(title = paste("Korrelationen: r =", cp3, ", rho =", cs3, ", tau =", ck3))
plot_ly(x=x, y=y3, type = "scatter") %>%
add_lines(y = ~fitted(lm(y3 ~ poly(x,2))), showlegend = FALSE)
modell <- lm(y3 ~ poly(x,2))
summary(modell)
r <- sqrt(summary(modell)$r.squared)
r
knitr::opts_chunk$set(echo = TRUE)
library(lattice)
library(BSDA)
data(Readiq)
library(BSDA)
data(Readiq)
library(BSDA)
data(Readiq)
Readiq
ggplot(mietspiegel, aes(y=mietspiegel$nm, x=mietspiegel$wfl)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("Wohnfläche") +
ylab("Nettomiete")
---
output:
html_document: default
html_notebook: default
pdf_document: default
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Aufgabenblatt 9
## Statistik fÃ¼r Wirtschaftsinformatiker, Ãbung, HTW Berlin
### Michael Heimann, Shirin Riazy
Stand: `r format(Sys.Date(), format='%d.%m.%Y')`
## Wiederholung
* Was ist Korrelation?
-> Korrelation beschreibt den Zusammenhang von Variablen in zwei Dimensionen <Richtung> und <Stärke>.
* Was ist lineare Regression?
-> Mit linearer Regression lassen sich die Werte einer Variablen vorhersagen.
* Was ist die Gleichung fÃ¼r eine Gerade?
-> y = m*x + c
-> yk = bxk + a
-> yk = Kriteriumswert
-> xk = Prädikatorenwert
->  a = Schnittpunkt mit y-Achse
* Welche ist die unabhÃ¤ngige und welche ist die abhÃ¤ngige Variable in der Gleichung?
-> das Prädikat bzw. die Prädikatoren sind die unabhängigen Variablen, die das Kriterium, die abhängige Variable, vorhersagen können.
## Aufgabe 9.1 (Regressionsrechnung)
Laden Sie den Datensatz `Readiq` aus dem R-Paket `BSDA`.
```{r, message=FALSE}
library(BSDA)
data(Readiq)
Readiq
```
a) Machen Sie sich mit dem Datensatz vertraut. Was sind die beiden Merkmale in dem Datensatz?
b) Fertigen Sie ein Streudiagramm (Scatterplot) an.
c) Bestimmem Sie den Korrelationskoeffizienten nach Pearson fÃ¼r die beiden Merkmale. Liegt keine, eine schwache, eine mittlere oder eine starke positive bzw. negative Korrelation zwischen beiden Merkmalen vor? Was bedeutet dies?
d) Bestimmen Sie die Geradengleichung der linearen Regression mit `Readiq$reading` als unabhÃ¤ngige und `Readiq$iq` als abhÃ¤ngige Variable. Berechnen Sie dazu die Werte von $a$ und $b$ in R mit den Formeln aus der Vorlesung. Hinweis: Obwohl `sd()` in R die Stichprobenvarianz und nicht die empirische Varianz aus den Formeln ist, kann `sd()` benutzt werden, da sich die Faktoren ($1/n$ bzw. $1/(n+1)$) in der Formel herauskÃ¼rzen.
e) FÃ¼gen Sie dem Streuungsdiagramm von `Readiq$reading` und `Readiq$iq` die Regressionsgerade zu. Hinweis: Benutze `abline()`.
## Aufgabe 9.2 (Regressionsrechnung)
Ãber die EinfÃ¼hrung des Mindestlohns wurde lange diskutiert. Ende 2007 verÃ¶ffentlichte die *Wirtschaftswoche* folgende Daten zu Mindestlohn (in Euro) und
Arbeitslosenquote (in Prozent):
```{r}
library(knitr)
mindestlohn_tabelle <- data.frame(row.names = c("Irland", "Frankreich", "GroÃbritannien",
"Belgien", "Niederlande", "USA", "Spanien"),
Mindestlohn = c(8.65, 4.44, 8.2, 8.08, 8.08, 4.3, 3.42),
Arbeitslosenquote = c(4.4, 9.0, 5.5, 8.2, 5.5, 4.6, 8.5))
kable(mindestlohn_tabelle)
```
## Aufgabe 9.3 (Regressionsrechnung)
Benutzen Sie wieder die Daten des Mietspiegels in MÃ¼nchen von 2003.
```{r}
library(ggplot2)
mietspiegel <- read.table("miete03.asc", header=TRUE)
mietspiegel
ggplot(mietspiegel, aes(y=mietspiegel$nm, x=mietspiegel$wfl)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("Wohnfläche") +
ylab("Nettomiete")
```
a) Stellen Sie den Zusammenhang zwischen der WohnflÃ¤che `mietspiegel$wfl` als unabhÃ¤ngiger und Nettomiete `mietspiegel$nm` als abhÃ¤ngiger Variable als Streudiagramm und durch die Regressionsgerade dar.
```{r}
ggplot(mietspiegel, aes(y=mietspiegel$nm, x=mietspiegel$wfl)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("Wohnfläche") +
ylab("Nettomiete")
mietspiegel_regression <- lm(mietspiegel$nm ~ mietspiegel$wfl, data = mietspiegel)
mietspiegel_regression
summary(mietspiegel_regression)
```
b) Stellen Sie die Geradengleichung auf und berechnen die Nettomieten fÃ¼r die WohnflÃ¤chen 60qm, 100qm und 150qm, die sich aus der Geradengleichung als SchÃ¤tzwerte ergeben.
-> y = 5x + 270
60qm  = 570
100qm = 770
150qm = 1020
c) Betrachten Sie wie in Aufgabe 9.2 das Regressionsobjekt mit `summary()`. Wie viel Prozent der Varianz von Nettomiete wird durch die WohnflÃ¤che erklÃ¤rt?
knitr::opts_chunk$set(echo = TRUE)
mietspiegel_regression
m <- mietspiegel_regression$coefficients[2]
n <- mietspiegel_regression$coefficients[1]
m <- mietspiegel_regression$coefficients[2]
n <- mietspiegel_regression$coefficients[1]
m*60+n
m <- mietspiegel_regression$coefficients[2]
n <- mietspiegel_regression$coefficients[1]
m*c(60, 100, 150)+n
summary(mietspiegel_regression)
ggplot(mietspiegel, aes(y=mietspiegel$nm, x=mietspiegel$wfl)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("Wohnfläche") +
ylab("Nettomiete")
mietspiegel_regression <- lm(mietspiegel$nm ~ mietspiegel$wfl, data = mietspiegel)
mietspiegel_regression
summary(mietspiegel_regression)
mietspiegel_regression
summary(mietspiegel_regression)
summary(mietspiegel_regression)
0.5005^2
summary(mietspiegel_regression)
#Multiple R-squared:  0.5005
KorrelationskoeffizientR <- 0.5005^2
summary(mietspiegel_regression)
#Multiple R-squared:  0.5005
KorrelationskoeffizientR <- 0.5005^2
KorrelationskoeffizientR
library(BSDA)
data(Readiq)
Readiq
library(ggplot2)
ggplot(Readiq, aes(y=Readiq$reading, x=Readiq$iq)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("ReadIQ - IQ") +
ylab("ReadIQ - Reading")
summary(mietspiegel_regression)
#Multiple R-squared:  0.5005
KorrelationskoeffizientR <- sqrt(0.5005)
KorrelationskoeffizientR #0.2505002
library(ggplot2)
ggplot(Readiq, aes(y=Readiq$reading, x=Readiq$iq)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("ReadIQ - IQ") +
ylab("ReadIQ - Reading")
# pch ist das Symbol eines Punktes, cex die Größe
plot(Readiq$reading, Readiq$iq, xlab = "ReadIQ - IQ", ylab = "ReadIQ - Reading",
main = "Streudiagramm/Scatter Plot", pch=1, cex=1)
library(ggplot2)
ggplot(Readiq, aes(y=Readiq$reading, x=Readiq$iq)) +
#geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("ReadIQ - IQ") +
ylab("ReadIQ - Reading")
# pch ist das Symbol eines Punktes, cex die Größe
plot(Readiq$reading, Readiq$iq, xlab = "ReadIQ - IQ", ylab = "ReadIQ - Reading",
main = "Streudiagramm/Scatter Plot", pch=1, cex=1)
library(ggplot2)
ggplot(Readiq, aes(y=Readiq$reading, x=Readiq$iq)) +
geom_point(shape=1) +
#geom_smooth(method=lm) +
xlab("ReadIQ - IQ") +
ylab("ReadIQ - Reading")
# pch ist das Symbol eines Punktes, cex die Größe
plot(Readiq$reading, Readiq$iq, xlab = "ReadIQ - IQ", ylab = "ReadIQ - Reading",
main = "Streudiagramm/Scatter Plot", pch=1, cex=1)
assocstats(Readiq$reading)
library(vcd)
assocstats(Readiq$reading)
library(vcd)
assocstats(Readiq)
library(vcd)
assocstats(Readiq$reading)
library(vcd)
assocstats(Readiq$iq)
library(vcd)
assocstats(Readiq)
library(vcd)
assocstats(Readiq)
readIq_regression_reading <- lm(reading ~ iq, data = Readiq)
readIq_regression_reading <- lm(reading ~ iq, data = Readiq)
summary(readIq_regression_reading)
readIq_regression_reading <- lm(reading ~ iq, data = Readiq)
summary(readIq_regression_reading)
readIq_regression_iq <- lm(iq ~ reading, data = Readiq)
summary(readIq_regression_iq)
cor(x=Readiq$reading, y= NULL, method = "pearson")
cor(x=Readiq$reading, method = "pearson")
cor(x=Readiq$reading, y=Readiq$iq, method = "pearson")
cor(x=Readiq$reading, y=Readiq$iq, method = "pearson")
cor(x=Readiq$iq, y=Readiq$reading, method = "pearson")
library(ggplot2)
ggplot(Readiq, aes(y=Readiq$reading, x=Readiq$iq)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("ReadIQ - IQ") +
ylab("ReadIQ - Reading")
# pch ist das Symbol eines Punktes, cex die Größe
plot(Readiq$reading, Readiq$iq, xlab = "ReadIQ - IQ", ylab = "ReadIQ - Reading",
main = "Streudiagramm/Scatter Plot", pch=1, cex=1) +
abline()
cor(x=Readiq$reading, y=Readiq$iq, method = "pearson")
cor(x=Readiq, method = "pearson")
cor(x=Readiq$iq, y=Readiq$reading, method = "pearson")
cor(x=Readiq, method = "pearson")
library(ggplot2)
ggplot(Readiq, aes(y=Readiq$reading, x=Readiq$iq)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("ReadIQ - IQ") +
ylab("ReadIQ - Reading")
# pch ist das Symbol eines Punktes, cex die Größe
plot(Readiq$reading, Readiq$iq, xlab = "ReadIQ - IQ", ylab = "ReadIQ - Reading",
main = "Streudiagramm/Scatter Plot", pch=1, cex=1)
abline(readIq_regression_reading)
library(ggplot2)
ggplot(Readiq, aes(y=Readiq$reading, x=Readiq$iq)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("ReadIQ - IQ") +
ylab("ReadIQ - Reading")
# pch ist das Symbol eines Punktes, cex die Größe
plot(Readiq$reading, Readiq$iq, xlab = "ReadIQ - IQ", ylab = "ReadIQ - Reading",
main = "Streudiagramm/Scatter Plot", pch=1, cex=1)
regressionReadIq <- lm(Readiq$reading, Readiq$iq, data = Readiq)
library(ggplot2)
ggplot(Readiq, aes(y=Readiq$reading, x=Readiq$iq)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("ReadIQ - IQ") +
ylab("ReadIQ - Reading")
# pch ist das Symbol eines Punktes, cex die Größe
plot(Readiq$reading, Readiq$iq, xlab = "ReadIQ - IQ", ylab = "ReadIQ - Reading",
main = "Streudiagramm/Scatter Plot", pch=1, cex=1)
regressionReadIq <- lm(reading ~ iq, data = Readiq)
abline(regressionReadIq)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(Readiq, aes(y=Readiq$reading, x=Readiq$iq)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("ReadIQ - IQ") +
ylab("ReadIQ - Reading")
# pch ist das Symbol eines Punktes, cex die Größe
plot(Readiq$reading, Readiq$iq, xlab = "ReadIQ - IQ", ylab = "ReadIQ - Reading",
main = "Streudiagramm/Scatter Plot", pch=1, cex=1)
#fit a linear regression model to the data
reg_model <- lm(reading ~ iq, data = Readiq)
#define intercept and slope values
a <- coefficients(reg_model)[1] #intercept
b <- coefficients(reg_model)[2] #slope
#add the fitted regression line to the scatterplot
abline(a=a, b=b, col="steelblue")
library(ggplot2)
ggplot(Readiq, aes(y=reading, x=iq)) +
geom_point(shape=1) +
geom_smooth(method=lm) +
xlab("ReadIQ - IQ") +
ylab("ReadIQ - Reading")
# pch ist das Symbol eines Punktes, cex die Größe
plot(Readiq$reading, Readiq$iq, xlab = "ReadIQ - IQ", ylab = "ReadIQ - Reading",
main = "Streudiagramm/Scatter Plot", pch=1, cex=1)
#fit a linear regression model to the data
reg_model <- lm(reading ~ iq, data = Readiq)
#define intercept and slope values
a <- coefficients(reg_model)[1] #intercept
b <- coefficients(reg_model)[2] #slope
#add the fitted regression line to the scatterplot
abline(a=a, b=b, col="steelblue")
plot(Readiq$reading, Readiq$iq, xlab = "ReadIQ - IQ", ylab = "ReadIQ - Reading",
main = "Streudiagramm/Scatter Plot", pch=1, cex=1)
#fit a linear regression model to the data
reg_model <- lm(reading ~ iq, data = Readiq)
#define intercept and slope values
a <- coefficients(reg_model)[1] #intercept
b <- coefficients(reg_model)[2] #slope
#add the fitted regression line to the scatterplot
abline(a=a, b=b, col="steelblue")
#fit a linear regression model to the data
reg_model <- lm(reading ~ iq, data = Readiq)
#define intercept and slope values
a <- coefficients(reg_model)[1] #intercept
b <- coefficients(reg_model)[2] #slope
# pch ist das Symbol eines Punktes, cex die Größe
plot(Readiq$reading, Readiq$iq, xlab = "ReadIQ - IQ", ylab = "ReadIQ - Reading",
main = "Streudiagramm/Scatter Plot", pch=1, cex=1)
#add the fitted regression line to the scatterplot
abline(a=a, b=b, col="steelblue")
abline?
?abline
abline
library(shiny); runApp('C:/Users/Max Mustermann/Desktop/HTW/Semester 3/Statistik PCÜ/Gruppe02/Gruppe02.R')
